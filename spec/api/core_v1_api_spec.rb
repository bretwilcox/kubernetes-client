=begin
#Kubernetes

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1.8.3

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for Kubernetes::CoreV1Api
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CoreV1Api' do
  before do
    # run before each test
    @instance = Kubernetes::CoreV1Api.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CoreV1Api' do
    it 'should create an instance of CoreV1Api' do
      expect(@instance).to be_instance_of(Kubernetes::CoreV1Api)
    end
  end

  # unit tests for connect_delete_namespaced_pod_proxy
  # 
  # connect DELETE requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_delete_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_delete_namespaced_pod_proxy_with_path
  # 
  # connect DELETE requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_delete_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_delete_namespaced_service_proxy
  # 
  # connect DELETE requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_delete_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_delete_namespaced_service_proxy_with_path
  # 
  # connect DELETE requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_delete_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_delete_node_proxy
  # 
  # connect DELETE requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_delete_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_delete_node_proxy_with_path
  # 
  # connect DELETE requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_delete_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_pod_attach
  # 
  # connect GET requests to attach of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
  # @option opts [BOOLEAN] :stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
  # @option opts [BOOLEAN] :stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
  # @option opts [BOOLEAN] :stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
  # @option opts [BOOLEAN] :tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
  # @return [String]
  describe 'connect_get_namespaced_pod_attach test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_pod_exec
  # 
  # connect GET requests to exec of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :command Command is the remote command to execute. argv array. Not executed within a shell.
  # @option opts [String] :container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
  # @option opts [BOOLEAN] :stderr Redirect the standard error stream of the pod for this call. Defaults to true.
  # @option opts [BOOLEAN] :stdin Redirect the standard input stream of the pod for this call. Defaults to false.
  # @option opts [BOOLEAN] :stdout Redirect the standard output stream of the pod for this call. Defaults to true.
  # @option opts [BOOLEAN] :tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
  # @return [String]
  describe 'connect_get_namespaced_pod_exec test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_pod_portforward
  # 
  # connect GET requests to portforward of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ports List of ports to forward Required when using WebSockets
  # @return [String]
  describe 'connect_get_namespaced_pod_portforward test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_pod_proxy
  # 
  # connect GET requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_get_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_pod_proxy_with_path
  # 
  # connect GET requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_get_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_service_proxy
  # 
  # connect GET requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_get_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_namespaced_service_proxy_with_path
  # 
  # connect GET requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_get_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_node_proxy
  # 
  # connect GET requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_get_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_get_node_proxy_with_path
  # 
  # connect GET requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_get_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_head_namespaced_pod_proxy
  # 
  # connect HEAD requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_head_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_head_namespaced_pod_proxy_with_path
  # 
  # connect HEAD requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_head_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_head_namespaced_service_proxy
  # 
  # connect HEAD requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_head_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_head_namespaced_service_proxy_with_path
  # 
  # connect HEAD requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_head_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_head_node_proxy
  # 
  # connect HEAD requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_head_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_head_node_proxy_with_path
  # 
  # connect HEAD requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_head_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_options_namespaced_pod_proxy
  # 
  # connect OPTIONS requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_options_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_options_namespaced_pod_proxy_with_path
  # 
  # connect OPTIONS requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_options_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_options_namespaced_service_proxy
  # 
  # connect OPTIONS requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_options_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_options_namespaced_service_proxy_with_path
  # 
  # connect OPTIONS requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_options_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_options_node_proxy
  # 
  # connect OPTIONS requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_options_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_options_node_proxy_with_path
  # 
  # connect OPTIONS requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_options_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_patch_namespaced_pod_proxy
  # 
  # connect PATCH requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_patch_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_patch_namespaced_pod_proxy_with_path
  # 
  # connect PATCH requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_patch_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_patch_namespaced_service_proxy
  # 
  # connect PATCH requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_patch_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_patch_namespaced_service_proxy_with_path
  # 
  # connect PATCH requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_patch_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_patch_node_proxy
  # 
  # connect PATCH requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_patch_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_patch_node_proxy_with_path
  # 
  # connect PATCH requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_patch_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_pod_attach
  # 
  # connect POST requests to attach of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :container The container in which to execute the command. Defaults to only container if there is only one container in the pod.
  # @option opts [BOOLEAN] :stderr Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.
  # @option opts [BOOLEAN] :stdin Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.
  # @option opts [BOOLEAN] :stdout Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.
  # @option opts [BOOLEAN] :tty TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.
  # @return [String]
  describe 'connect_post_namespaced_pod_attach test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_pod_exec
  # 
  # connect POST requests to exec of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :command Command is the remote command to execute. argv array. Not executed within a shell.
  # @option opts [String] :container Container in which to execute the command. Defaults to only container if there is only one container in the pod.
  # @option opts [BOOLEAN] :stderr Redirect the standard error stream of the pod for this call. Defaults to true.
  # @option opts [BOOLEAN] :stdin Redirect the standard input stream of the pod for this call. Defaults to false.
  # @option opts [BOOLEAN] :stdout Redirect the standard output stream of the pod for this call. Defaults to true.
  # @option opts [BOOLEAN] :tty TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.
  # @return [String]
  describe 'connect_post_namespaced_pod_exec test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_pod_portforward
  # 
  # connect POST requests to portforward of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :ports List of ports to forward Required when using WebSockets
  # @return [String]
  describe 'connect_post_namespaced_pod_portforward test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_pod_proxy
  # 
  # connect POST requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_post_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_pod_proxy_with_path
  # 
  # connect POST requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_post_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_service_proxy
  # 
  # connect POST requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_post_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_namespaced_service_proxy_with_path
  # 
  # connect POST requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_post_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_node_proxy
  # 
  # connect POST requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_post_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_post_node_proxy_with_path
  # 
  # connect POST requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_post_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_put_namespaced_pod_proxy
  # 
  # connect PUT requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_put_namespaced_pod_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_put_namespaced_pod_proxy_with_path
  # 
  # connect PUT requests to proxy of Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to pod.
  # @return [String]
  describe 'connect_put_namespaced_pod_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_put_namespaced_service_proxy
  # 
  # connect PUT requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_put_namespaced_service_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_put_namespaced_service_proxy_with_path
  # 
  # connect PUT requests to proxy of Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q&#x3D;user:kimchy. Path is _search?q&#x3D;user:kimchy.
  # @return [String]
  describe 'connect_put_namespaced_service_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_put_node_proxy
  # 
  # connect PUT requests to proxy of Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_put_node_proxy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for connect_put_node_proxy_with_path
  # 
  # connect PUT requests to proxy of Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @option opts [String] :path2 Path is the URL path to use for the current proxy request to node.
  # @return [String]
  describe 'connect_put_node_proxy_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespace
  # 
  # create a Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'create_namespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_binding
  # 
  # create a Binding
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Binding]
  describe 'create_namespaced_binding test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_config_map
  # 
  # create a ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ConfigMap]
  describe 'create_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_endpoints
  # 
  # create Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Endpoints]
  describe 'create_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_event
  # 
  # create an Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Event]
  describe 'create_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_limit_range
  # 
  # create a LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1LimitRange]
  describe 'create_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_persistent_volume_claim
  # 
  # create a PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolumeClaim]
  describe 'create_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_pod
  # 
  # create a Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Pod]
  describe 'create_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_pod_binding
  # 
  # create binding of a Pod
  # @param name name of the Binding
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Binding]
  describe 'create_namespaced_pod_binding test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_pod_eviction
  # 
  # create eviction of a Pod
  # @param name name of the Eviction
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1beta1Eviction]
  describe 'create_namespaced_pod_eviction test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_pod_template
  # 
  # create a PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PodTemplate]
  describe 'create_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_replication_controller
  # 
  # create a ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ReplicationController]
  describe 'create_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_resource_quota
  # 
  # create a ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ResourceQuota]
  describe 'create_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_secret
  # 
  # create a Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Secret]
  describe 'create_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_service
  # 
  # create a Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Service]
  describe 'create_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_namespaced_service_account
  # 
  # create a ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ServiceAccount]
  describe 'create_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_node
  # 
  # create a Node
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Node]
  describe 'create_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_persistent_volume
  # 
  # create a PersistentVolume
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolume]
  describe 'create_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_config_map
  # 
  # delete collection of ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_endpoints
  # 
  # delete collection of Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_event
  # 
  # delete collection of Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_limit_range
  # 
  # delete collection of LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_persistent_volume_claim
  # 
  # delete collection of PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_pod
  # 
  # delete collection of Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_pod_template
  # 
  # delete collection of PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_replication_controller
  # 
  # delete collection of ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_resource_quota
  # 
  # delete collection of ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_secret
  # 
  # delete collection of Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_namespaced_service_account
  # 
  # delete collection of ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_node
  # 
  # delete collection of Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_collection_persistent_volume
  # 
  # delete collection of PersistentVolume
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1Status]
  describe 'delete_collection_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespace
  # 
  # delete a Namespace
  # @param name name of the Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_config_map
  # 
  # delete a ConfigMap
  # @param name name of the ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_endpoints
  # 
  # delete Endpoints
  # @param name name of the Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_event
  # 
  # delete an Event
  # @param name name of the Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_limit_range
  # 
  # delete a LimitRange
  # @param name name of the LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_persistent_volume_claim
  # 
  # delete a PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_pod
  # 
  # delete a Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_pod_template
  # 
  # delete a PodTemplate
  # @param name name of the PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_replication_controller
  # 
  # delete a ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_resource_quota
  # 
  # delete a ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_secret
  # 
  # delete a Secret
  # @param name name of the Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_service
  # 
  # delete a Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Status]
  describe 'delete_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_namespaced_service_account
  # 
  # delete a ServiceAccount
  # @param name name of the ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_node
  # 
  # delete a Node
  # @param name name of the Node
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_persistent_volume
  # 
  # delete a PersistentVolume
  # @param name name of the PersistentVolume
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [BOOLEAN] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.
  # @return [V1Status]
  describe 'delete_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_api_resources
  # 
  # get available resources
  # @param [Hash] opts the optional parameters
  # @return [V1APIResourceList]
  describe 'get_api_resources test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_component_status
  # 
  # list objects of kind ComponentStatus
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ComponentStatusList]
  describe 'list_component_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_config_map_for_all_namespaces
  # 
  # list or watch objects of kind ConfigMap
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ConfigMapList]
  describe 'list_config_map_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_endpoints_for_all_namespaces
  # 
  # list or watch objects of kind Endpoints
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1EndpointsList]
  describe 'list_endpoints_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_event_for_all_namespaces
  # 
  # list or watch objects of kind Event
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1EventList]
  describe 'list_event_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_limit_range_for_all_namespaces
  # 
  # list or watch objects of kind LimitRange
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1LimitRangeList]
  describe 'list_limit_range_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespace
  # 
  # list or watch objects of kind Namespace
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1NamespaceList]
  describe 'list_namespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_config_map
  # 
  # list or watch objects of kind ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ConfigMapList]
  describe 'list_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_endpoints
  # 
  # list or watch objects of kind Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1EndpointsList]
  describe 'list_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_event
  # 
  # list or watch objects of kind Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1EventList]
  describe 'list_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_limit_range
  # 
  # list or watch objects of kind LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1LimitRangeList]
  describe 'list_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_persistent_volume_claim
  # 
  # list or watch objects of kind PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PersistentVolumeClaimList]
  describe 'list_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_pod
  # 
  # list or watch objects of kind Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PodList]
  describe 'list_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_pod_template
  # 
  # list or watch objects of kind PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PodTemplateList]
  describe 'list_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_replication_controller
  # 
  # list or watch objects of kind ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ReplicationControllerList]
  describe 'list_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_resource_quota
  # 
  # list or watch objects of kind ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ResourceQuotaList]
  describe 'list_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_secret
  # 
  # list or watch objects of kind Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1SecretList]
  describe 'list_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_service
  # 
  # list or watch objects of kind Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ServiceList]
  describe 'list_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_namespaced_service_account
  # 
  # list or watch objects of kind ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ServiceAccountList]
  describe 'list_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_node
  # 
  # list or watch objects of kind Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1NodeList]
  describe 'list_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_persistent_volume
  # 
  # list or watch objects of kind PersistentVolume
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PersistentVolumeList]
  describe 'list_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_persistent_volume_claim_for_all_namespaces
  # 
  # list or watch objects of kind PersistentVolumeClaim
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PersistentVolumeClaimList]
  describe 'list_persistent_volume_claim_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_pod_for_all_namespaces
  # 
  # list or watch objects of kind Pod
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PodList]
  describe 'list_pod_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_pod_template_for_all_namespaces
  # 
  # list or watch objects of kind PodTemplate
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1PodTemplateList]
  describe 'list_pod_template_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_replication_controller_for_all_namespaces
  # 
  # list or watch objects of kind ReplicationController
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ReplicationControllerList]
  describe 'list_replication_controller_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_resource_quota_for_all_namespaces
  # 
  # list or watch objects of kind ResourceQuota
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ResourceQuotaList]
  describe 'list_resource_quota_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_secret_for_all_namespaces
  # 
  # list or watch objects of kind Secret
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1SecretList]
  describe 'list_secret_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_service_account_for_all_namespaces
  # 
  # list or watch objects of kind ServiceAccount
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ServiceAccountList]
  describe 'list_service_account_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_service_for_all_namespaces
  # 
  # list or watch objects of kind Service
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [BOOLEAN] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything.
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.
  # @option opts [Integer] :timeout_seconds Timeout for the list/watch call.
  # @option opts [BOOLEAN] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1ServiceList]
  describe 'list_service_for_all_namespaces test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespace
  # 
  # partially update the specified Namespace
  # @param name name of the Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'patch_namespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespace_status
  # 
  # partially update status of the specified Namespace
  # @param name name of the Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'patch_namespace_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_config_map
  # 
  # partially update the specified ConfigMap
  # @param name name of the ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ConfigMap]
  describe 'patch_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_endpoints
  # 
  # partially update the specified Endpoints
  # @param name name of the Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Endpoints]
  describe 'patch_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_event
  # 
  # partially update the specified Event
  # @param name name of the Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Event]
  describe 'patch_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_limit_range
  # 
  # partially update the specified LimitRange
  # @param name name of the LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1LimitRange]
  describe 'patch_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_persistent_volume_claim
  # 
  # partially update the specified PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolumeClaim]
  describe 'patch_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_persistent_volume_claim_status
  # 
  # partially update status of the specified PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolumeClaim]
  describe 'patch_namespaced_persistent_volume_claim_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_pod
  # 
  # partially update the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Pod]
  describe 'patch_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_pod_status
  # 
  # partially update status of the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Pod]
  describe 'patch_namespaced_pod_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_pod_template
  # 
  # partially update the specified PodTemplate
  # @param name name of the PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PodTemplate]
  describe 'patch_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_replication_controller
  # 
  # partially update the specified ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ReplicationController]
  describe 'patch_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_replication_controller_scale
  # 
  # partially update scale of the specified ReplicationController
  # @param name name of the Scale
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Scale]
  describe 'patch_namespaced_replication_controller_scale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_replication_controller_status
  # 
  # partially update status of the specified ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ReplicationController]
  describe 'patch_namespaced_replication_controller_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_resource_quota
  # 
  # partially update the specified ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ResourceQuota]
  describe 'patch_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_resource_quota_status
  # 
  # partially update status of the specified ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ResourceQuota]
  describe 'patch_namespaced_resource_quota_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_secret
  # 
  # partially update the specified Secret
  # @param name name of the Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Secret]
  describe 'patch_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_service
  # 
  # partially update the specified Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Service]
  describe 'patch_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_service_account
  # 
  # partially update the specified ServiceAccount
  # @param name name of the ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ServiceAccount]
  describe 'patch_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_namespaced_service_status
  # 
  # partially update status of the specified Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Service]
  describe 'patch_namespaced_service_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_node
  # 
  # partially update the specified Node
  # @param name name of the Node
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Node]
  describe 'patch_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_node_status
  # 
  # partially update status of the specified Node
  # @param name name of the Node
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Node]
  describe 'patch_node_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_persistent_volume
  # 
  # partially update the specified PersistentVolume
  # @param name name of the PersistentVolume
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolume]
  describe 'patch_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_persistent_volume_status
  # 
  # partially update status of the specified PersistentVolume
  # @param name name of the PersistentVolume
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolume]
  describe 'patch_persistent_volume_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_delete_namespaced_pod
  # 
  # proxy DELETE requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_delete_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_delete_namespaced_pod_with_path
  # 
  # proxy DELETE requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_delete_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_delete_namespaced_service
  # 
  # proxy DELETE requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_delete_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_delete_namespaced_service_with_path
  # 
  # proxy DELETE requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_delete_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_delete_node
  # 
  # proxy DELETE requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_delete_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_delete_node_with_path
  # 
  # proxy DELETE requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_delete_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_get_namespaced_pod
  # 
  # proxy GET requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_get_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_get_namespaced_pod_with_path
  # 
  # proxy GET requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_get_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_get_namespaced_service
  # 
  # proxy GET requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_get_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_get_namespaced_service_with_path
  # 
  # proxy GET requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_get_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_get_node
  # 
  # proxy GET requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_get_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_get_node_with_path
  # 
  # proxy GET requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_get_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_head_namespaced_pod
  # 
  # proxy HEAD requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_head_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_head_namespaced_pod_with_path
  # 
  # proxy HEAD requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_head_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_head_namespaced_service
  # 
  # proxy HEAD requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_head_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_head_namespaced_service_with_path
  # 
  # proxy HEAD requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_head_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_head_node
  # 
  # proxy HEAD requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_head_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_head_node_with_path
  # 
  # proxy HEAD requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_head_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_options_namespaced_pod
  # 
  # proxy OPTIONS requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_options_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_options_namespaced_pod_with_path
  # 
  # proxy OPTIONS requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_options_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_options_namespaced_service
  # 
  # proxy OPTIONS requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_options_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_options_namespaced_service_with_path
  # 
  # proxy OPTIONS requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_options_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_options_node
  # 
  # proxy OPTIONS requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_options_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_options_node_with_path
  # 
  # proxy OPTIONS requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_options_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_patch_namespaced_pod
  # 
  # proxy PATCH requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_patch_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_patch_namespaced_pod_with_path
  # 
  # proxy PATCH requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_patch_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_patch_namespaced_service
  # 
  # proxy PATCH requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_patch_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_patch_namespaced_service_with_path
  # 
  # proxy PATCH requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_patch_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_patch_node
  # 
  # proxy PATCH requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_patch_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_patch_node_with_path
  # 
  # proxy PATCH requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_patch_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_post_namespaced_pod
  # 
  # proxy POST requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_post_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_post_namespaced_pod_with_path
  # 
  # proxy POST requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_post_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_post_namespaced_service
  # 
  # proxy POST requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_post_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_post_namespaced_service_with_path
  # 
  # proxy POST requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_post_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_post_node
  # 
  # proxy POST requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_post_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_post_node_with_path
  # 
  # proxy POST requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_post_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_put_namespaced_pod
  # 
  # proxy PUT requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_put_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_put_namespaced_pod_with_path
  # 
  # proxy PUT requests to Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_put_namespaced_pod_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_put_namespaced_service
  # 
  # proxy PUT requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_put_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_put_namespaced_service_with_path
  # 
  # proxy PUT requests to Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_put_namespaced_service_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_put_node
  # 
  # proxy PUT requests to Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_put_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for proxy_put_node_with_path
  # 
  # proxy PUT requests to Node
  # @param name name of the Node
  # @param path path to the resource
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'proxy_put_node_with_path test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_component_status
  # 
  # read the specified ComponentStatus
  # @param name name of the ComponentStatus
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ComponentStatus]
  describe 'read_component_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespace
  # 
  # read the specified Namespace
  # @param name name of the Namespace
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Namespace]
  describe 'read_namespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespace_status
  # 
  # read status of the specified Namespace
  # @param name name of the Namespace
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'read_namespace_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_config_map
  # 
  # read the specified ConfigMap
  # @param name name of the ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1ConfigMap]
  describe 'read_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_endpoints
  # 
  # read the specified Endpoints
  # @param name name of the Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Endpoints]
  describe 'read_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_event
  # 
  # read the specified Event
  # @param name name of the Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Event]
  describe 'read_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_limit_range
  # 
  # read the specified LimitRange
  # @param name name of the LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1LimitRange]
  describe 'read_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_persistent_volume_claim
  # 
  # read the specified PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1PersistentVolumeClaim]
  describe 'read_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_persistent_volume_claim_status
  # 
  # read status of the specified PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolumeClaim]
  describe 'read_namespaced_persistent_volume_claim_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_pod
  # 
  # read the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Pod]
  describe 'read_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_pod_log
  # 
  # read log of the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :container The container for which to stream logs. Defaults to only container if there is one container in the pod.
  # @option opts [BOOLEAN] :follow Follow the log stream of the pod. Defaults to false.
  # @option opts [Integer] :limit_bytes If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :previous Return previous terminated container logs. Defaults to false.
  # @option opts [Integer] :since_seconds A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.
  # @option opts [Integer] :tail_lines If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime
  # @option opts [BOOLEAN] :timestamps If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.
  # @return [String]
  describe 'read_namespaced_pod_log test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_pod_status
  # 
  # read status of the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Pod]
  describe 'read_namespaced_pod_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_pod_template
  # 
  # read the specified PodTemplate
  # @param name name of the PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1PodTemplate]
  describe 'read_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_replication_controller
  # 
  # read the specified ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1ReplicationController]
  describe 'read_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_replication_controller_scale
  # 
  # read scale of the specified ReplicationController
  # @param name name of the Scale
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Scale]
  describe 'read_namespaced_replication_controller_scale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_replication_controller_status
  # 
  # read status of the specified ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ReplicationController]
  describe 'read_namespaced_replication_controller_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_resource_quota
  # 
  # read the specified ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1ResourceQuota]
  describe 'read_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_resource_quota_status
  # 
  # read status of the specified ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ResourceQuota]
  describe 'read_namespaced_resource_quota_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_secret
  # 
  # read the specified Secret
  # @param name name of the Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Secret]
  describe 'read_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_service
  # 
  # read the specified Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Service]
  describe 'read_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_service_account
  # 
  # read the specified ServiceAccount
  # @param name name of the ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1ServiceAccount]
  describe 'read_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_namespaced_service_status
  # 
  # read status of the specified Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Service]
  describe 'read_namespaced_service_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_node
  # 
  # read the specified Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1Node]
  describe 'read_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_node_status
  # 
  # read status of the specified Node
  # @param name name of the Node
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Node]
  describe 'read_node_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_persistent_volume
  # 
  # read the specified PersistentVolume
  # @param name name of the PersistentVolume
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @option opts [BOOLEAN] :exact Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [BOOLEAN] :export Should this value be exported.  Export strips fields that a user can not specify.
  # @return [V1PersistentVolume]
  describe 'read_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for read_persistent_volume_status
  # 
  # read status of the specified PersistentVolume
  # @param name name of the PersistentVolume
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolume]
  describe 'read_persistent_volume_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespace
  # 
  # replace the specified Namespace
  # @param name name of the Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'replace_namespace test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespace_finalize
  # 
  # replace finalize of the specified Namespace
  # @param name name of the Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'replace_namespace_finalize test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespace_status
  # 
  # replace status of the specified Namespace
  # @param name name of the Namespace
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Namespace]
  describe 'replace_namespace_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_config_map
  # 
  # replace the specified ConfigMap
  # @param name name of the ConfigMap
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ConfigMap]
  describe 'replace_namespaced_config_map test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_endpoints
  # 
  # replace the specified Endpoints
  # @param name name of the Endpoints
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Endpoints]
  describe 'replace_namespaced_endpoints test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_event
  # 
  # replace the specified Event
  # @param name name of the Event
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Event]
  describe 'replace_namespaced_event test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_limit_range
  # 
  # replace the specified LimitRange
  # @param name name of the LimitRange
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1LimitRange]
  describe 'replace_namespaced_limit_range test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_persistent_volume_claim
  # 
  # replace the specified PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolumeClaim]
  describe 'replace_namespaced_persistent_volume_claim test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_persistent_volume_claim_status
  # 
  # replace status of the specified PersistentVolumeClaim
  # @param name name of the PersistentVolumeClaim
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolumeClaim]
  describe 'replace_namespaced_persistent_volume_claim_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_pod
  # 
  # replace the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Pod]
  describe 'replace_namespaced_pod test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_pod_status
  # 
  # replace status of the specified Pod
  # @param name name of the Pod
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Pod]
  describe 'replace_namespaced_pod_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_pod_template
  # 
  # replace the specified PodTemplate
  # @param name name of the PodTemplate
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PodTemplate]
  describe 'replace_namespaced_pod_template test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_replication_controller
  # 
  # replace the specified ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ReplicationController]
  describe 'replace_namespaced_replication_controller test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_replication_controller_scale
  # 
  # replace scale of the specified ReplicationController
  # @param name name of the Scale
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Scale]
  describe 'replace_namespaced_replication_controller_scale test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_replication_controller_status
  # 
  # replace status of the specified ReplicationController
  # @param name name of the ReplicationController
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ReplicationController]
  describe 'replace_namespaced_replication_controller_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_resource_quota
  # 
  # replace the specified ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ResourceQuota]
  describe 'replace_namespaced_resource_quota test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_resource_quota_status
  # 
  # replace status of the specified ResourceQuota
  # @param name name of the ResourceQuota
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ResourceQuota]
  describe 'replace_namespaced_resource_quota_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_secret
  # 
  # replace the specified Secret
  # @param name name of the Secret
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Secret]
  describe 'replace_namespaced_secret test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_service
  # 
  # replace the specified Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Service]
  describe 'replace_namespaced_service test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_service_account
  # 
  # replace the specified ServiceAccount
  # @param name name of the ServiceAccount
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1ServiceAccount]
  describe 'replace_namespaced_service_account test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_namespaced_service_status
  # 
  # replace status of the specified Service
  # @param name name of the Service
  # @param namespace object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Service]
  describe 'replace_namespaced_service_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_node
  # 
  # replace the specified Node
  # @param name name of the Node
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Node]
  describe 'replace_node test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_node_status
  # 
  # replace status of the specified Node
  # @param name name of the Node
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1Node]
  describe 'replace_node_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_persistent_volume
  # 
  # replace the specified PersistentVolume
  # @param name name of the PersistentVolume
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolume]
  describe 'replace_persistent_volume test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for replace_persistent_volume_status
  # 
  # replace status of the specified PersistentVolume
  # @param name name of the PersistentVolume
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pretty If &#39;true&#39;, then the output is pretty printed.
  # @return [V1PersistentVolume]
  describe 'replace_persistent_volume_status test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
